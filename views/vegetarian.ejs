<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/cart.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body>

    <div class="container"> 
        <h1>Please make your selection</h1>
        
        <div id="alerts"></div>
     <div class="productcont" >
             
             <div class="product">
                <div class="thumbnail">
                    <a href="https://images.unsplash.com/photo-1512621776951-a57141f2eefd?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80">
                      <img src="https://images.unsplash.com/photo-1512621776951-a57141f2eefd?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80" 
                      alt="Lights" style="width:100%">
                      <div class="caption">
                        <p>A salad bowl or tossed salad is a metaphor for the way a multicultural society can integrate different cultures while maintaining their separate identities, contrasting with a melting pot, which emphasizes the combination of the parts into a single whole. ...</p>
                      </div>
                    </a>
                  </div>
                 <h3 class="productname">T4205-2</h3>
                 <p>T4205- SALAD BOWL.</p>
                 <p class="price">$8.50</p>
                 <button class="addtocart">Add To Cart</button>
             </div>
             <div class="product">
                <div class="thumbnail">
                    <a href="https://images.unsplash.com/photo-1617470703128-26a0fc9af10f?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1052&q=80">
                      <img src="https://images.unsplash.com/photo-1617470703128-26a0fc9af10f?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1052&q=80" 
                      alt="Lights" style="width:100%">
                      <div class="caption">
                        <p>Pizza, dish of Italian origin consisting of a flattened disk of bread dough topped with some combination of olive oil, oregano, tomato, olives, mozzarella or other cheese, and many other ingredients, baked quickly—usually, in a commercial setting, using a wood-fired oven heated to a very high temperature—and served hot.

                            One of the simplest and most tra...</p>
                      </div>
                    </a>
                  </div>
                 <h3 class="productname">T4205-1</h3>
                 <p>T4205- PIZZA MARGHERITA.</p>
                 <p class="price">$10.50</p>
                 <button class="addtocart">Add To Cart</button>
             </div>
             
             </div>
             <div class="cart-container">
               <h2>Your Selection</h2>
               <table>
                 <thead>
                   <tr>
                   <th><strong>Product</strong></th>
                   <th><strong>Price</strong></th>
                 </tr>
                 </thead>
                 <tbody id="carttable">
                 </tbody>
               </table>
               <hr>
               <table id="carttotals">
                 <tr>
                   <td><strong>Items</strong></td>
                   <td><strong>Total</strong></td>
                 </tr>
                 <tr>
                   <td>x <span id="itemsquantity">0</span></td>
                  
                   <td>$<span id="total">0</span></td>
                 </tr></table>
     
                 
                 <form action="/toErp" method="post">
                  <div class="cart-buttons">  
                    <button id="emptycart">Empty Cart</button>
                    <button type="submit" id="checkout"  onclick="sendtoapp()"     >Checkout</button>
                    <input  id="cartTotal"  type="text"   name="cart"  >
                   </div>
               </form>

             </div>
     </div>


 <script>
    /* get cart total from session on load */
var cartTotal ;

    function sendtoapp(){
        document.getElementById('cartTotal').value = cartTotal;
        console.log('called in function sendtoapp',cartTotal)
    }

    updateCartTotal();

/* button event listeners */
document.getElementById("emptycart").addEventListener("click", emptyCart);
var btns = document.getElementsByClassName('addtocart');
for (var i = 0; i < btns.length; i++) {
    btns[i].addEventListener('click', function() {addToCart(this);});
}

/* ADD TO CART functions */

function addToCart(elem) {
    //init
    var sibs = [];
    var getprice;
    var getproductName;
    var cart = [];
     var stringCart;
    //cycles siblings for product info near the add button
    while(elem = elem.previousSibling) {
        if (elem.nodeType === 3) continue; // text node
        if(elem.className == "price"){
            getprice = elem.innerText;
        }
        if (elem.className == "productname") {
            getproductName = elem.innerText;
        }
        sibs.push(elem);
    }
    //create product object
    var product = {
        productname : getproductName,
        price : getprice
    };
    //convert product data to JSON for storage
    var stringProduct = JSON.stringify(product);
    /*send product data to session storage */
    
    if(!sessionStorage.getItem('cart')){
        //append product JSON object to cart array
        cart.push(stringProduct);
        //cart to JSON
        stringCart = JSON.stringify(cart);
        //create session storage cart item
        sessionStorage.setItem('cart', stringCart);
        addedToCart(getproductName);
        updateCartTotal();
    }
    else {
        //get existing cart data from storage and convert back into array
       cart = JSON.parse(sessionStorage.getItem('cart'));
        //append new product JSON object
        cart.push(stringProduct);
        //cart back to JSON
        stringCart = JSON.stringify(cart);
        //overwrite cart data in sessionstorage 
        sessionStorage.setItem('cart', stringCart);
        addedToCart(getproductName);
        updateCartTotal();
    }
}
/* Calculate Cart Total */
function updateCartTotal(){
    //init
    var total = 0;
    var price = 0;
    var items = 0;
    var productname = "";
    var carttable = "";
    var productsInCasrt = [];
    if(sessionStorage.getItem('cart')) {
        //get cart data & parse to array
        var cart = JSON.parse(sessionStorage.getItem('cart'));
        cartTotal = cart;
        //get no of items in cart 
        items = cart.length;
        //loop over cart array
        for (var i = 0; i < items; i++){
            //convert each JSON product in array back into object
            var x = JSON.parse(cart[i]);
            //get property value of price
            price = parseFloat(x.price.split('$')[1]);
            productname = x.productname;
            //add price to total
            carttable += "<tr><td>" + productname + "</td><td>$" + price.toFixed(2) + "</td></tr>";
            productsInCasrt.push(productname);
            total += price;
        }
        
    }
    //update total on website HTML
    document.getElementById("total").innerHTML = total.toFixed(2);
    //insert saved products to cart table
    document.getElementById("carttable").innerHTML = carttable;
    // cartTotal = cart;
// console.log('cartTotal', cartTotal)
    //update items in cart on website HTML
    document.getElementById("itemsquantity").innerHTML = items;
}
//user feedback on successful add
function addedToCart(pname) {
  var message = pname + " was added to the cart";
  var alerts = document.getElementById("alerts");
  alerts.innerHTML = message;
  if(!alerts.classList.contains("message")){
     alerts.classList.add("message");
  }
}
/* User Manually empty cart */
function emptyCart() {
    //remove cart session storage object & refresh cart totals
    if(sessionStorage.getItem('cart')){
        sessionStorage.removeItem('cart');
        updateCartTotal();
      //clear message and remove class style
      var alerts = document.getElementById("alerts");
      alerts.innerHTML = "";
      if(alerts.classList.contains("message")){
          alerts.classList.remove("message");
      }
    }
}
</script>

</body>
</html>